import { NonNeverFn } from "plgg/index";

/**
 * Type-safe function composition with overloads for inference.
 */
export function pipe<A, B>(a: A, ab: NonNeverFn<(a: A) => B>): B;
export function pipe<A, B, C>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
): C;
export function pipe<A, B, C, D>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
): D;
export function pipe<A, B, C, D, E>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
): E;
export function pipe<A, B, C, D, E, F>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
): F;
export function pipe<A, B, C, D, E, F, G>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
): G;
export function pipe<A, B, C, D, E, F, G, H>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
): H;
export function pipe<A, B, C, D, E, F, G, H, I>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
): I;
export function pipe<A, B, C, D, E, F, G, H, I, J>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
): J;
export function pipe<A, B, C, D, E, F, G, H, I, J, K>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
): K;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
): L;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
): M;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
): N;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
  no: NonNeverFn<(n: N) => O>,
): O;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
  no: NonNeverFn<(n: N) => O>,
  op: NonNeverFn<(o: O) => P>,
): P;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
  no: NonNeverFn<(n: N) => O>,
  op: NonNeverFn<(o: O) => P>,
  pq: NonNeverFn<(p: P) => Q>,
): Q;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
  no: NonNeverFn<(n: N) => O>,
  op: NonNeverFn<(o: O) => P>,
  pq: NonNeverFn<(p: P) => Q>,
  qr: NonNeverFn<(q: Q) => R>,
): R;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
  no: NonNeverFn<(n: N) => O>,
  op: NonNeverFn<(o: O) => P>,
  pq: NonNeverFn<(p: P) => Q>,
  qr: NonNeverFn<(q: Q) => R>,
  rs: NonNeverFn<(r: R) => S>,
): S;
export function pipe<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
  no: NonNeverFn<(n: N) => O>,
  op: NonNeverFn<(o: O) => P>,
  pq: NonNeverFn<(p: P) => Q>,
  qr: NonNeverFn<(q: Q) => R>,
  rs: NonNeverFn<(r: R) => S>,
  st: NonNeverFn<(s: S) => T>,
): T;
export function pipe<
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
>(
  a: A,
  ab: NonNeverFn<(a: A) => B>,
  bc: NonNeverFn<(b: B) => C>,
  cd: NonNeverFn<(c: C) => D>,
  de: NonNeverFn<(d: D) => E>,
  ef: NonNeverFn<(e: E) => F>,
  fg: NonNeverFn<(f: F) => G>,
  gh: NonNeverFn<(g: G) => H>,
  hi: NonNeverFn<(h: H) => I>,
  ij: NonNeverFn<(i: I) => J>,
  jk: NonNeverFn<(j: J) => K>,
  kl: NonNeverFn<(k: K) => L>,
  lm: NonNeverFn<(l: L) => M>,
  mn: NonNeverFn<(m: M) => N>,
  no: NonNeverFn<(n: N) => O>,
  op: NonNeverFn<(o: O) => P>,
  pq: NonNeverFn<(p: P) => Q>,
  qr: NonNeverFn<(q: Q) => R>,
  rs: NonNeverFn<(r: R) => S>,
  st: NonNeverFn<(s: S) => T>,
  tu: NonNeverFn<(t: T) => U>,
): U;

/**
 * Pipes value through functions sequentially.
 */
export function pipe(
  value: unknown,
  ...fns: ReadonlyArray<(a: unknown) => unknown>
): unknown {
  return fns.reduce((acc, fn) => fn(acc), value);
}
